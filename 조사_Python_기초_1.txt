1. https://www.youtube.com/watch?v=yytWGELNeOI , https://www.youtube.com/watch?v=3R6vFdb7YI4 를 보고 내용을 본문에 간단히 정리하라.

영상 1. 파이썬이란 무엇인가

파이썬 : 귀도 반 로섬이 취미로 만든 프로그램 언어(1989년 개발 - 1991년 발표)

#쉽다 #공동작업간편 #유지보수간편

파이썬의 특징

- 가장 인간다운 언어이다
- 문법이 쉽다, 고로 빠르게 배울 수 있다
- 무료이다
- C언어와 상성이 좋다. (느린 파이썬 + 빠른 C언어)
- 파이썬 라이브러리 중에는 C로 만들어진 것도 있다.
- 쉽지만 느리다
- '쉽지만 느리다'란? : 컴파일 언너와 인터프린터 언어

C언어 - 컴파일 언어 : 컴파일러를 통해 기계어로 번역 가능

파이썬 - 인터프린터 언어 : 인터프린터를 거쳐 한줄씩 읽고 씀

- 간결하다, 그러나 엄격하다
- 개발 속도가 빠르다 : "인생은 너무 짧으니 파이썬이 필요해"

파이썬의 활용

- 시스템 유틸리티 제작
- 시스템 청소 및 최적화 프로그램
- GUI : 그래픽 유저 인터페이스 (ex. 매크로 프로그램)
- 웹 프로그래밍(장고, 플라스크)
- 수치 연산 프로그래밍
- 데이터 베이스 프로그래밍
- 데이터 베이스 : 데이터가 저장하는 공간
- 데이터 분석

파이썬 설치 및 구성 설명

- VS code 설치 (이걸로 진행)
- 파이참 설치

VS code

- 영어 설정 : 이후 오류 발생시 자료를 찾기 쉬움
- Extension(블럭 모양 아이콘) : 프로그램에 도움을 주는 추가적인 프로그램
- Extension 'Python'&'Pylint' 추천
- [Terminal] - [New Terminal]을 실행하면 맨 하단에 cmd창 같은 기능을 하는 부분이 생김

VS code 코드 실행

- 터미널에 'python 파일명.py'를 작성하면 됨 또는 우측 상단에 '재생'버튼(RUN)을 클릭해주면 됨
* 파일명을 작성할 때 앞에 한 글자만 입력하고 tap을 누르면 자동 완성 됨
- 폴더에 들어가고 싶을 땐 'cd 폴더명'을 작성하면 됨
- 폴더 뒤로가기는 'cd ..'을 작성하면 됨

추가 실습

- 터미널에 'python'만 작성 하면 'REPL' 이라는 IDEL같이 '코드 입력-실행' 이 되는 창이 실행된다.
- REPL을 종료하고 싶을 땐 'Ctrl + z'해주면 됨

주석 : 어떤 낱말이나 문자의 뜻을 이해하기 쉽도록 풀이한 것(코드에 대한 부가 설명) - 파이썬은 '#'을 사용

영상 2. 파이썬 프로그래밍의 기초, 자료형(1)

자료형 : 값의 타입(그 값이 숫자인지 문자인지 구분할 수 있게 해줌)

자료형의 종류 : 숫자형, 문자열, bool(참/거짓)

"="이란? : 왼쪽에 오른쪽의 값을 넣는다

- 자료형 확인 방법

type(변수명)

숫자형

- 정수형 : int
- 실수형 : float
- 지수형(8진수/16진수 등등)

사칙연산

- 더하기 : +
- 빼기 : -
- 곱하기 : *
- 제곱 : **
- 나누기 : /
- 나누기(몫) : //
- 나누기(나머지) : %

문자열: str(string)

- 작은 따옴표&큰 따옴표
- 문장내에 따옴표를 사용하고 싶을 때는 "\(역슬래쉬)"를 사용한다

ex. 예시 1. 'I'm juyeon' = error / 예시 2. 'I\'m juyeon' = I'm juyeon

\조합

- \n : 줄바꿈
- \t : 들여쓰기(Tap)

문자열의 사칙연산

a = "Python" / b = "is fun"

- a+b = Python is fun
- a*3 = PythonPytonPython

인덱싱

a = "Life is too short, You need Python"

- 나열 된 문자 왼쪽부터 0~n이라는 번호가 매겨짐
- 나열 된 문자 오른쪽부터 -1~-n이라는 번호가 매겨짐
- a[0] = L / a[12] = s / a[-1] = n

슬라이싱

a = "Life is too short, You need Python"

- 문자열의 n번째 문자부터 N번째 문자 전 까지
- a [ 이상 : 미만 : 간격 ]
- 이상:미만:생략(가능) / 생략:미만:생략(가능) / 이상:생략:생략(가능) / 이상:생략:간격(가능) / 생략:미만:간격(가능)
- 이상 생략 -> 0~미만까지, 미만 생략 -> 이상~끝까지

ex. a [ : : 2 ] -> Lf stosot o edPto / a[ : : -2 ] -> nhy enuY,rh o iei

문자열 포매팅

a = “I eat %d apples.”%3 

b = “I eat “ + str(3) + “ apples”

print(a) → I eat 3 apples.

- 특정한 부분의 영역에 다른 문자나 숫자 등을 넣는 경우 사용
- 사용 안 할 경우(=b의 경우) 다른 형식의 문자를 넣을 때 각각 따옴표로 묶어서 나눠줘야 하는 번거로움이 존재함

예시 1

number = 10

day = “three”

a = “I ate %d apples. so I was sick for %s days.” % (number, day)

print(a) → I ate 10 apples. so I was sick for three days.

예시 2 - 1

a = “{ }하세요. 반갑습니다.” .format(”안녕”)

print(a) → 안녕하세요. 반갑습니다.

예시 2 - 2

a = “{ name }님 안녕하세요. 반갑습니다.” .format(name = ”박주연”)

print(a) → 박주연님 안녕하세요. 반갑습니다.

예시 2 - 3

a = “{major} { name }님 안녕하세요. 반갑습니다.” .format(name = ”박주연”, major = “게임공학과”)  //변수의 순서가 상관없음. 변수명에 따라 들어감

print(a) → 게임공학과 박주연님 안녕하세요. 반갑습니다.

예시 2 - 4

name = “박주연”

a = f”나의 이름은 {name}입니다.”  //f : format

print(a) → 나의 이름은 박주연입니다.

정렬과 공백

“%10s”%”hi” → ‘          hi’ //우정렬

“%-10sjane.”%’hi’ → ‘hi          jane’  //좌정렬

소수점 표현

“%0.4f” % 3.42134234 → ‘3.4213’ //0.n이라고 했을 때 소수점 이하 n번째 자리에서 잘림

“%10.4f” % 3.42134234 → ‘          3.4213’ //N.n이라고 했을 때 N만큼 들여 쓰고, 소수점 이하 n번째 자리에서 잘림

함수 : 어떤 특정한 일을 하는 명령어들을 묶어 놓은 것

count 함수 : 갯수 세기
a = "hobby"
print(a.count('b')) -> 2

find 함수 : 몇 번 자리에 있는 지 찾기(찾고자하는 문자가 처음 오는 순서를 알려줌)
a = "hobby"
print(a.find('b')) -> 2

print(a.find('x')) -> -1 //없는 걸 찾을 때는 '-1'이 나옴

index 함수 : find와 동일 기능, 그러나 이 함수는 찾고자하는 문자가 없을 경우에는 오류가 남.

join 함수
a = ',' .join("abcd")
print(a) -> a,b,c,d

a = ',' . join(["a", "b", "c"])
print(a) -> a,b,c  //각각 따로 였던 문자들을 join하여 하나의 string으로 만들어줌

upper 함수 : 소문자->대문자

lower 함수 : 대문자 -> 소문자

strip 함수 : 공백 제거 함수
a = '     hi     '
print(a.strip) -> hi

replace 함수 : 문자열 바꾸기
a = "Life is too short"
a.replace("Life","Your leg") -> Your leg is too short

split 함수 : 문자열 나누기(띄어쓰기 단위로 문자열을 잘라서 리스트로 만듬)
a = "Life is too short"
a.split() -> ['Life','is','too','short']

b = "a:b:c:d"
b.split(":") -> ['a','b','c','d'] // 괄호 안에 들어간 특정 문자 기준으로 자르는 것도 가능

리스트를 사용하는 이유 : 변수의 갯수가 늘어나서 많은 양의 변수를 관리 해야할 때 

리스트
a = ["김영희","김철수","홍길동","박주연"]
print(a) -> 김영희, 김철수, 홍길동, 박주연
print(a[1]) -> 김철수

list_a = [] //빈 값 (ㅇ)
lsit_b = [1,2,3] //숫자 (ㅇ)
list_c = ['life','is','too','short'] //문자 (ㅇ)
list_d = [1,2,'life','is'] //숫자+문자 (ㅇ)
lsit_e = [1,2,'life','is',['too','short']] //리스트안에 리스트 (ㅇ)

print(list_e[4]) -> 'too','short'
print(list_e[4][1]) -> too

리스트 인덱싱
a = [1,2,3]
print(a[0]) -> 1
print(a[0]+a[2]) -> 4 //a[0] = 1, a[2] = 3 ... 1+3=4
print(a[-1]) -> 3

리스트 더하기
a = [1,2,3]
b = [4,5,6]
print(a+b) -> [1,2,3,4,5,6]

리스트 반복
a = [1,2,3]
print(a*3) -> [1,2,3,1,2,3,1,2,3]

리스트 값 수정
a = [1,2,3]
a[2] = 10
print(a) -> [1,2,10]
a[1:2] = [3,5,7] //[이상:미만]
print(a) -> [1,3,5,7,10]

리스트 값 삭제
a = [1,2,3,4,5]
a[1:3] = []
print(a) -> 1,4,5

리스트 추가/삭제/정렬
a = [1,2,3,4,5]

a.append(2)
print(a) -> [1,2,3,4,5,2]

del a[1]
print(a) -> [1,3,4,5,2]

a.sort()
print(a) -> [1,2,3,4,5]

reverse : 리스트 뒤집기
a = [1,2,3]
a.reverse()
print(a) -> [3,2,1]

index : 위치 반환
a = [1,2,3]
a.index(3) -> 2

리스트 요소 삽입/제거
a = [1,2,3]

a.insert(0,4)
print(a) -> [4,1,2,3]

a.remove(4)  //인덱스 값이 아니라 지우고자 하는 값을 입력
print(a) -> [1,2,3]

pop : 리스트 요소 꺼내기(리스트의 마지막에 위치한 요소를 꺼냄 -> 리스트에서는 삭제됨
a = [1,2,3]
a.pop -> 3
print(a) -> [1,2]

count : 리스트에 포함된 요소 x의 개수 세기
a = [1,2,3,1,1,2,3,2,2]
a.count(1) -> 3

extend : 리스트 확장
a = [1,2,3]
a.extend([4,5])
print(a) -> [1,2,3,4,5]
b = [6,7]
a.extend(b)
print(a) -> [1,2,3,4,5,6,7]

2. python 개발툴을 설치하고 실행해 본 결과를 캡쳐해 넣어라.


3. 1번과 2번을 해 보고 python 에 대해 느낀 점을 기술해 보라. 기존에 python 에 대해 가지고 있던 생각이 있다면 추가해도 좋다.